#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>

using namespace std;

void solve() {
    int t;
    cin >> t;
    vector<string> results(t);
    for (int tc = 0; tc < t; ++tc) {
        int n, m, k;
        cin >> n >> m >> k;
        string river;
        cin >> river;
        
        vector<int> dp(n + 2, INT_MAX);
        dp[0] = 0;  // Starting from the left bank
        
        for (int i = 0; i <= n; ++i) {
            if (dp[i] == INT_MAX) {
                continue;
            }
            // Try to jump to all positions within the jump range
            for (int jump = 1; jump <= m; ++jump) {
                int new_pos = i + jump;
                if (new_pos > n + 1) {
                    continue;
                }
                if (new_pos == n + 1) {
                    dp[new_pos] = min(dp[new_pos], dp[i]);
                } else if (river[new_pos - 1] == 'L') {
                    dp[new_pos] = min(dp[new_pos], dp[i]);
                } else if (river[new_pos - 1] == 'W') {
                    dp[new_pos] = min(dp[new_pos], dp[i] + 1);
                } else if (river[new_pos - 1] == 'C') {
                    continue;
                }
            }
        }

        if (dp[n + 1] <= k) {
            results[tc] = "YES";
        } else {
            results[tc] = "NO";
        }
    }

    for (const string& result : results) {
        cout << result << endl;
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    solve();
    return 0;
}
